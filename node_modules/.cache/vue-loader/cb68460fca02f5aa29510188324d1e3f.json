{"remainingRequest":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/martadom/Desktop/TFM/tfm-marta-npm/src/views/myViews/news/News.vue?vue&type=template&id=450cf950&scoped=true&","dependencies":[{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/src/views/myViews/news/News.vue","mtime":1693494846672},{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/cache-loader/dist/cjs.js","mtime":1688895642525},{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1688895654604},{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/cache-loader/dist/cjs.js","mtime":1688895642525},{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/vue-loader/lib/index.js","mtime":1688895654604}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}