{"remainingRequest":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/martadom/Desktop/TFM/FINAL/tfm/src/views/myViews/Home.vue?vue&type=template&id=4ff51de6&scoped=true&","dependencies":[{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/src/views/myViews/Home.vue","mtime":1693494846671},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/cache-loader/dist/cjs.js","mtime":1688895642525},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vuetify-loader/lib/loader.js","mtime":1689868166971},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1688895654604},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/cache-loader/dist/cjs.js","mtime":1688895642525},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vue-loader/lib/index.js","mtime":1688895654604}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}