{"remainingRequest":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/martadom/Desktop/TFM/tfm-marta-npm/src/@core/layouts/components/app-customizer/AppCustomizer.vue?vue&type=template&id=52667d36&","dependencies":[{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/src/@core/layouts/components/app-customizer/AppCustomizer.vue","mtime":1689868462000},{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/cache-loader/dist/cjs.js","mtime":1688895642525},{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1688895654604},{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/cache-loader/dist/cjs.js","mtime":1688895642525},{"path":"/Users/martadom/Desktop/TFM/tfm-marta-npm/node_modules/vue-loader/lib/index.js","mtime":1688895654604}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}