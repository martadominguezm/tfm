{"remainingRequest":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vuetify-loader/lib/loader.js??ref--4!/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/martadom/Desktop/TFM/FINAL/tfm/src/views/myViews/news/News.vue?vue&type=template&id=450cf950&scoped=true&","dependencies":[{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/src/views/myViews/news/News.vue","mtime":1693494846672},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/src/views/myViews/news/News.vue","mtime":1693494846672},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/cache-loader/dist/cjs.js","mtime":1688895642525},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vuetify-loader/lib/loader.js","mtime":1689868166971},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1688895654604},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/cache-loader/dist/cjs.js","mtime":1688895642525},{"path":"/Users/martadom/Desktop/TFM/FINAL/tfm/node_modules/vue-loader/lib/index.js","mtime":1688895654604}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}